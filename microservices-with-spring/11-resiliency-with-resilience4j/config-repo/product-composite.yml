springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: se.magnus.microservices.composite.product
  pathsToMatch: /**
  cache.disabled: true

  swagger-ui:
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
    oauth:
      clientId: writer
      clientSecret: '{cipher}debb77857798ba70441b229de88624213b0a00b284f95fe31d1378d117cf3ffa'
      useBasicAuthenticationWithAccessCodeGrant: true
  oAuthFlow:
    authorizationUrl: https://localhost:8443/oauth2/authorize
    tokenUrl: https://localhost:8443/oauth2/token

server.forward-headers-strategy: framework

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.

server.port: 7000
server.error.include-message: always

spring.cloud.stream:
  default.contentType: application/json
  bindings:
    products-out-0:
      destination: products
      producer:
        required-groups: auditGroup
    recommendations-out-0:
      destination: recommendations
      producer:
        required-groups: auditGroup
    reviews-out-0:
      destination: reviews
      producer:
        required-groups: auditGroup

spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}:9999

resilience4j.timelimiter:
  instances:
    product:
      timeoutDuration: 2s

resilience4j.retry:
  instances:
    product:
      maxAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

# configure Spring Boot Actuator to add the circuit breaker health infor-
# mation that Resilience4j produces in the response to a request to its health endpoint:
management.health.circuitbreakers.enabled: true

# slidingWindowType: To determine if a circuit breaker needs to be opened, Resilience4j uses
# a sliding window, counting the most recent events to make the decision. The sliding windows
# can either be based on a fixed number of calls or a fixed elapsed time. This parameter is used
# to configure what type of sliding window is used.
#
# slidingWindowSize: The number of calls in a closed state,
# which are used to determine whether the circuit should be opened.
#
# failureRateThreshold:  The threshold, in percent, for failed calls that will cause the circuit to be opened
# We will set this parameter to 50%. This setting, together with slidingWindowSize set to 5, means
# that if three or more of the last five calls are faults, then the circuit will open
#
# automaticTransitionFromOpenToHalfOpenEnabled: Determines whether the circuit breaker
# will automatically transition to the half-open state once the waiting period is over. Otherwise, it
# will wait for the first call after the waiting period is over until it transitions to the half-open state
#
# waitDurationInOpenState: Specifies how long the circuit stays in an open state, that is, before
# it transitions to the half-open state.
#
# We will set this parameter to 10000 ms. This setting, together with enabling the automatic
# transition to the half-open state, set by the previous parameter, means that the circuit breaker
# will keep the circuit open for 10 seconds and then transition to the half-open state.
#
# permittedNumberOfCallsInHalfOpenState: The number of calls in the half-open state, which are used
# to determine whether the circuit will be opened again or go back to the normal, closed state.
# We will set this parameter to 3, meaning that the circuit breaker will decide whether the circuit
# will be opened or closed based on the first three calls after the circuit has transitioned to the
# half-open state. Since the failureRateThreshold parameters are set to 50%, the circuit will
# be open again if two or all three calls fail. Otherwise, the circuit will be closed.
#
# ignoreExceptions: This can be used to specify exceptions that should not be counted as faults.
# Expected business exceptions such as not found or invalid input are typical exceptions that
# the circuit breaker should ignore; users who search for non-existing data or enter invalid input
# should not cause the circuit to open.
#
# finally, to configure Resilience4j to report the state of the circuit breaker in the actuator health
# endpoint in the correct way the following parameters are set:
#
# registerHealthIndicator = true enables Resilience4j to fill in the health endpoint with
# information regarding the state of its circuit breakers.
#
# allowHealthIndicatorToFail = false tells Resilience4j not to affect the status of the health
# endpoint. This means that the health endpoint will still report "UP" even if one of the com-
# ponentâ€™s circuit breakers is in an open or half-open state. It is very important that the health
# state of the component is not reported as "DOWN" just because one of its circuit breakers is not
# in a closed state. This means that the component is still considered to be OK, even though one
# of the components it depends on is not.
#
resilience4j.circuitbreaker:
  instances:
    product:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.magnus.api.exceptions.InvalidInputException
        - se.magnus.api.exceptions.NotFoundException

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

---
spring.config.activate.on-profile: docker

server.port: 8080

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
